// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, role, is_active, email_verified)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, password_hash, role, is_active, email_verified, created_at, updated_at, last_login_at
`

type CreateUserParams struct {
	Email         string      `json:"email"`
	PasswordHash  string      `json:"password_hash"`
	Role          UserRole    `json:"role"`
	IsActive      pgtype.Bool `json:"is_active"`
	EmailVerified pgtype.Bool `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.IsActive,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, role, is_active, email_verified, created_at, updated_at, last_login_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, role, is_active, email_verified, created_at, updated_at, last_login_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, role, is_active, email_verified, created_at, updated_at, last_login_at FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.Role,
			&i.IsActive,
			&i.EmailVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByRole = `-- name: ListUsersByRole :many
SELECT id, email, password_hash, role, is_active, email_verified, created_at, updated_at, last_login_at FROM users
WHERE role = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersByRoleParams struct {
	Role   UserRole `json:"role"`
	Limit  int32    `json:"limit"`
	Offset int32    `json:"offset"`
}

func (q *Queries) ListUsersByRole(ctx context.Context, arg ListUsersByRoleParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsersByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.Role,
			&i.IsActive,
			&i.EmailVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = $2,
    password_hash = $3,
    role = $4,
    is_active = $5,
    email_verified = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, password_hash, role, is_active, email_verified, created_at, updated_at, last_login_at
`

type UpdateUserParams struct {
	ID            int32       `json:"id"`
	Email         string      `json:"email"`
	PasswordHash  string      `json:"password_hash"`
	Role          UserRole    `json:"role"`
	IsActive      pgtype.Bool `json:"is_active"`
	EmailVerified pgtype.Bool `json:"email_verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.IsActive,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return &i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}
