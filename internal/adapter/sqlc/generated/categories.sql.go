// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package sqlc

import (
	"context"
)

const checkCategoryHasMenuItems = `-- name: CheckCategoryHasMenuItems :one
SELECT false as has_items
`

// TODO: Update this query when menu_items table is created
func (q *Queries) CheckCategoryHasMenuItems(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, checkCategoryHasMenuItems)
	var has_items bool
	err := row.Scan(&has_items)
	return has_items, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name)
VALUES ($1)
RETURNING id, name, created_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (*Category, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return &i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, created_at FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int32) (*Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return &i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, created_at FROM categories
WHERE name = $1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (*Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return &i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, created_at FROM categories
ORDER BY name ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]*Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET 
    name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateCategoryParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (*Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return &i, err
}
