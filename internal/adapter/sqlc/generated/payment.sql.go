// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (order_id, amount, method, reference)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, amount, method, reference, paid_at
`

type CreatePaymentParams struct {
	OrderID   int32          `json:"order_id"`
	Amount    pgtype.Numeric `json:"amount"`
	Method    PaymentMethod  `json:"method"`
	Reference pgtype.Text    `json:"reference"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (*Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.Amount,
		arg.Method,
		arg.Reference,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Method,
		&i.Reference,
		&i.PaidAt,
	)
	return &i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getDailyPaymentSummary = `-- name: GetDailyPaymentSummary :many
SELECT 
    DATE(paid_at) as payment_date,
    method,
    COUNT(*) as payment_count,
    SUM(amount) as total_amount
FROM payments
WHERE paid_at >= $1 AND paid_at <= $2
GROUP BY DATE(paid_at), method
ORDER BY payment_date DESC, method
`

type GetDailyPaymentSummaryParams struct {
	PaidAt   pgtype.Timestamp `json:"paid_at"`
	PaidAt_2 pgtype.Timestamp `json:"paid_at_2"`
}

type GetDailyPaymentSummaryRow struct {
	PaymentDate  pgtype.Date   `json:"payment_date"`
	Method       PaymentMethod `json:"method"`
	PaymentCount int64         `json:"payment_count"`
	TotalAmount  int64         `json:"total_amount"`
}

func (q *Queries) GetDailyPaymentSummary(ctx context.Context, arg GetDailyPaymentSummaryParams) ([]*GetDailyPaymentSummaryRow, error) {
	rows, err := q.db.Query(ctx, getDailyPaymentSummary, arg.PaidAt, arg.PaidAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetDailyPaymentSummaryRow{}
	for rows.Next() {
		var i GetDailyPaymentSummaryRow
		if err := rows.Scan(
			&i.PaymentDate,
			&i.Method,
			&i.PaymentCount,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyPaymentSummary = `-- name: GetMonthlyPaymentSummary :many
SELECT 
    DATE_TRUNC('month', paid_at) as payment_month,
    method,
    COUNT(*) as payment_count,
    SUM(amount) as total_amount
FROM payments
WHERE paid_at >= $1 AND paid_at <= $2
GROUP BY DATE_TRUNC('month', paid_at), method
ORDER BY payment_month DESC, method
`

type GetMonthlyPaymentSummaryParams struct {
	PaidAt   pgtype.Timestamp `json:"paid_at"`
	PaidAt_2 pgtype.Timestamp `json:"paid_at_2"`
}

type GetMonthlyPaymentSummaryRow struct {
	PaymentMonth pgtype.Interval `json:"payment_month"`
	Method       PaymentMethod   `json:"method"`
	PaymentCount int64           `json:"payment_count"`
	TotalAmount  int64           `json:"total_amount"`
}

func (q *Queries) GetMonthlyPaymentSummary(ctx context.Context, arg GetMonthlyPaymentSummaryParams) ([]*GetMonthlyPaymentSummaryRow, error) {
	rows, err := q.db.Query(ctx, getMonthlyPaymentSummary, arg.PaidAt, arg.PaidAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMonthlyPaymentSummaryRow{}
	for rows.Next() {
		var i GetMonthlyPaymentSummaryRow
		if err := rows.Scan(
			&i.PaymentMonth,
			&i.Method,
			&i.PaymentCount,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, order_id, amount, method, reference, paid_at FROM payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id int32) (*Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Method,
		&i.Reference,
		&i.PaidAt,
	)
	return &i, err
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, order_id, amount, method, reference, paid_at FROM payments
WHERE order_id = $1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID int32) (*Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Method,
		&i.Reference,
		&i.PaidAt,
	)
	return &i, err
}

const getPaymentMethodStats = `-- name: GetPaymentMethodStats :many
SELECT 
    method,
    COUNT(*) as payment_count,
    SUM(amount) as total_amount,
    AVG(amount) as average_amount
FROM payments
WHERE paid_at >= $1 AND paid_at <= $2
GROUP BY method
ORDER BY total_amount DESC
`

type GetPaymentMethodStatsParams struct {
	PaidAt   pgtype.Timestamp `json:"paid_at"`
	PaidAt_2 pgtype.Timestamp `json:"paid_at_2"`
}

type GetPaymentMethodStatsRow struct {
	Method        PaymentMethod `json:"method"`
	PaymentCount  int64         `json:"payment_count"`
	TotalAmount   int64         `json:"total_amount"`
	AverageAmount float64       `json:"average_amount"`
}

func (q *Queries) GetPaymentMethodStats(ctx context.Context, arg GetPaymentMethodStatsParams) ([]*GetPaymentMethodStatsRow, error) {
	rows, err := q.db.Query(ctx, getPaymentMethodStats, arg.PaidAt, arg.PaidAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPaymentMethodStatsRow{}
	for rows.Next() {
		var i GetPaymentMethodStatsRow
		if err := rows.Scan(
			&i.Method,
			&i.PaymentCount,
			&i.TotalAmount,
			&i.AverageAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentsByOrderIDs = `-- name: GetPaymentsByOrderIDs :many
SELECT id, order_id, amount, method, reference, paid_at FROM payments
WHERE order_id = ANY($1::int[])
ORDER BY paid_at DESC
`

func (q *Queries) GetPaymentsByOrderIDs(ctx context.Context, dollar_1 []int32) ([]*Payment, error) {
	rows, err := q.db.Query(ctx, getPaymentsByOrderIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.Method,
			&i.Reference,
			&i.PaidAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPayments = `-- name: ListPayments :many
SELECT id, order_id, amount, method, reference, paid_at FROM payments
ORDER BY paid_at DESC
LIMIT $1 OFFSET $2
`

type ListPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]*Payment, error) {
	rows, err := q.db.Query(ctx, listPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.Method,
			&i.Reference,
			&i.PaidAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByDateRange = `-- name: ListPaymentsByDateRange :many
SELECT id, order_id, amount, method, reference, paid_at FROM payments
WHERE paid_at >= $1 AND paid_at < $2
ORDER BY paid_at DESC
LIMIT $3 OFFSET $4
`

type ListPaymentsByDateRangeParams struct {
	PaidAt   pgtype.Timestamp `json:"paid_at"`
	PaidAt_2 pgtype.Timestamp `json:"paid_at_2"`
	Limit    int32            `json:"limit"`
	Offset   int32            `json:"offset"`
}

func (q *Queries) ListPaymentsByDateRange(ctx context.Context, arg ListPaymentsByDateRangeParams) ([]*Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByDateRange,
		arg.PaidAt,
		arg.PaidAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.Method,
			&i.Reference,
			&i.PaidAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByMethod = `-- name: ListPaymentsByMethod :many
SELECT id, order_id, amount, method, reference, paid_at FROM payments
WHERE method = $1
ORDER BY paid_at DESC
LIMIT $2 OFFSET $3
`

type ListPaymentsByMethodParams struct {
	Method PaymentMethod `json:"method"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListPaymentsByMethod(ctx context.Context, arg ListPaymentsByMethodParams) ([]*Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByMethod, arg.Method, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.Method,
			&i.Reference,
			&i.PaidAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET order_id = $2, amount = $3, method = $4, reference = $5
WHERE id = $1
RETURNING id, order_id, amount, method, reference, paid_at
`

type UpdatePaymentParams struct {
	ID        int32          `json:"id"`
	OrderID   int32          `json:"order_id"`
	Amount    pgtype.Numeric `json:"amount"`
	Method    PaymentMethod  `json:"method"`
	Reference pgtype.Text    `json:"reference"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (*Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment,
		arg.ID,
		arg.OrderID,
		arg.Amount,
		arg.Method,
		arg.Reference,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Method,
		&i.Reference,
		&i.PaidAt,
	)
	return &i, err
}
