// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (table_id, status, notes, qrcode)
VALUES ($1, $2, $3, $4)
RETURNING id, table_id, status, notes, created_at, updated_at, closed_at, qrcode
`

type CreateOrderParams struct {
	TableID int32       `json:"table_id"`
	Status  OrderStatus `json:"status"`
	Notes   pgtype.Text `json:"notes"`
	Qrcode  pgtype.Text `json:"qrcode"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.TableID,
		arg.Status,
		arg.Notes,
		arg.Qrcode,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TableID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.Qrcode,
	)
	return &i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOpenOrderByTable = `-- name: GetOpenOrderByTable :one
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
WHERE table_id = $1 AND status = 'open'
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetOpenOrderByTable(ctx context.Context, tableID int32) (*Order, error) {
	row := q.db.QueryRow(ctx, getOpenOrderByTable, tableID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TableID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.Qrcode,
	)
	return &i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TableID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.Qrcode,
	)
	return &i, err
}

const getOrderByQRCode = `-- name: GetOrderByQRCode :one
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
WHERE qrcode = $1
`

func (q *Queries) GetOrderByQRCode(ctx context.Context, qrcode pgtype.Text) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrderByQRCode, qrcode)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TableID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.Qrcode,
	)
	return &i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]*Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.TableID,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.Qrcode,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByDateRange = `-- name: ListOrdersByDateRange :many
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
WHERE created_at >= $1 AND created_at <= $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListOrdersByDateRangeParams struct {
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	CreatedAt_2 pgtype.Timestamp `json:"created_at_2"`
	Limit       int32            `json:"limit"`
	Offset      int32            `json:"offset"`
}

func (q *Queries) ListOrdersByDateRange(ctx context.Context, arg ListOrdersByDateRangeParams) ([]*Order, error) {
	rows, err := q.db.Query(ctx, listOrdersByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.TableID,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.Qrcode,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByStatus = `-- name: ListOrdersByStatus :many
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersByStatusParams struct {
	Status OrderStatus `json:"status"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListOrdersByStatus(ctx context.Context, arg ListOrdersByStatusParams) ([]*Order, error) {
	rows, err := q.db.Query(ctx, listOrdersByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.TableID,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.Qrcode,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByTable = `-- name: ListOrdersByTable :many
SELECT id, table_id, status, notes, created_at, updated_at, closed_at, qrcode FROM orders
WHERE table_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersByTableParams struct {
	TableID int32 `json:"table_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListOrdersByTable(ctx context.Context, arg ListOrdersByTableParams) ([]*Order, error) {
	rows, err := q.db.Query(ctx, listOrdersByTable, arg.TableID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.TableID,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.Qrcode,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET 
    table_id = $2,
    status = $3,
    notes = $4,
    closed_at = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, table_id, status, notes, created_at, updated_at, closed_at, qrcode
`

type UpdateOrderParams struct {
	ID       int32            `json:"id"`
	TableID  int32            `json:"table_id"`
	Status   OrderStatus      `json:"status"`
	Notes    pgtype.Text      `json:"notes"`
	ClosedAt pgtype.Timestamp `json:"closed_at"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.TableID,
		arg.Status,
		arg.Notes,
		arg.ClosedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TableID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.Qrcode,
	)
	return &i, err
}
