// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menu_item.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countMenuItemsByCategory = `-- name: CountMenuItemsByCategory :one
SELECT COUNT(*) FROM menu_items
WHERE category_id = $1 AND is_active = true
`

func (q *Queries) CountMenuItemsByCategory(ctx context.Context, categoryID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countMenuItemsByCategory, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (category_id, name, description, price, is_active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, category_id, name, description, price, is_active, created_at, updated_at
`

type CreateMenuItemParams struct {
	CategoryID  int32          `json:"category_id"`
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	IsActive    pgtype.Bool    `json:"is_active"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (*MenuItem, error) {
	row := q.db.QueryRow(ctx, createMenuItem,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.IsActive,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM menu_items
WHERE id = $1
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMenuItem, id)
	return err
}

const getMenuItemByID = `-- name: GetMenuItemByID :one
SELECT id, category_id, name, description, price, is_active, created_at, updated_at FROM menu_items
WHERE id = $1
`

func (q *Queries) GetMenuItemByID(ctx context.Context, id int32) (*MenuItem, error) {
	row := q.db.QueryRow(ctx, getMenuItemByID, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getMenuItemsByIDs = `-- name: GetMenuItemsByIDs :many
SELECT id, category_id, name, description, price, is_active, created_at, updated_at FROM menu_items
WHERE id = ANY($1::int[])
  AND is_active = true
ORDER BY name ASC
`

func (q *Queries) GetMenuItemsByIDs(ctx context.Context, dollar_1 []int32) ([]*MenuItem, error) {
	rows, err := q.db.Query(ctx, getMenuItemsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuItems = `-- name: ListMenuItems :many
SELECT id, category_id, name, description, price, is_active, created_at, updated_at FROM menu_items
WHERE is_active = true
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListMenuItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMenuItems(ctx context.Context, arg ListMenuItemsParams) ([]*MenuItem, error) {
	rows, err := q.db.Query(ctx, listMenuItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuItemsByCategory = `-- name: ListMenuItemsByCategory :many
SELECT id, category_id, name, description, price, is_active, created_at, updated_at FROM menu_items
WHERE category_id = $1 AND is_active = true
ORDER BY name ASC
LIMIT $2 OFFSET $3
`

type ListMenuItemsByCategoryParams struct {
	CategoryID int32 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListMenuItemsByCategory(ctx context.Context, arg ListMenuItemsByCategoryParams) ([]*MenuItem, error) {
	rows, err := q.db.Query(ctx, listMenuItemsByCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMenuItems = `-- name: SearchMenuItems :many
SELECT id, category_id, name, description, price, is_active, created_at, updated_at FROM menu_items
WHERE (name ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%')
  AND is_active = true
ORDER BY name ASC
LIMIT $2 OFFSET $3
`

type SearchMenuItemsParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) SearchMenuItems(ctx context.Context, arg SearchMenuItemsParams) ([]*MenuItem, error) {
	rows, err := q.db.Query(ctx, searchMenuItems, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE menu_items
SET 
    category_id = $2,
    name = $3,
    description = $4,
    price = $5,
    is_active = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, category_id, name, description, price, is_active, created_at, updated_at
`

type UpdateMenuItemParams struct {
	ID          int32          `json:"id"`
	CategoryID  int32          `json:"category_id"`
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	IsActive    pgtype.Bool    `json:"is_active"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (*MenuItem, error) {
	row := q.db.QueryRow(ctx, updateMenuItem,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.IsActive,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateMenuItemStatus = `-- name: UpdateMenuItemStatus :one
UPDATE menu_items
SET 
    is_active = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, category_id, name, description, price, is_active, created_at, updated_at
`

type UpdateMenuItemStatusParams struct {
	ID       int32       `json:"id"`
	IsActive pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateMenuItemStatus(ctx context.Context, arg UpdateMenuItemStatusParams) (*MenuItem, error) {
	row := q.db.QueryRow(ctx, updateMenuItemStatus, arg.ID, arg.IsActive)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
